version: "3.0"
  
services:
  # setup:
  #  image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
  #  volumes:
  #    - certs:/usr/share/elasticsearch/config/certs
  #  user: "0"
  #  command: >
  #    bash -c '
  #      if [ x${ELASTIC_PASSWORD} == x ]; then
  #        echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
  #        exit 1;
  #      elif [ x${KIBANA_PASSWORD} == x ]; then
  #        echo "Set the KIBANA_PASSWORD environment variable in the .env file";
  #        exit 1;
  #      fi;
  #      if [ ! -f config/certs/ca.zip ]; then
  #        echo "Creating CA";
  #        bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
  #        unzip config/certs/ca.zip -d config/certs;
  #      fi;
  #      if [ ! -f config/certs/certs.zip ]; then
  #        echo "Creating certs";
  #        echo -ne \
  #        "instances:\n"\
  #        "  - name: es01\n"\
  #        "    dns:\n"\
  #        "      - es01\n"\
  #        "      - localhost\n"\
  #        "    ip:\n"\
  #        "      - 127.0.0.1\n"\
  #        "  - name: kibana\n"\
  #        "    dns:\n"\
  #        "      - kibana\n"\
  #        "      - localhost\n"\
  #        "    ip:\n"\
  #        "      - 127.0.0.1\n"\
  #        > config/certs/instances.yml;
  #        bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
  #        unzip config/certs/certs.zip -d config/certs;
  #      fi;
  #      echo "Setting file permissions"
  #      chown -R root:root config/certs;
  #      find . -type d -exec chmod 750 \{\} \;;
  #      find . -type f -exec chmod 640 \{\} \;;
  #      echo "Waiting for Elasticsearch availability";
  #      until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
  #      echo "Setting kibana_system password";
  #      until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
  #      echo "All done!";
  #    '
  #  healthcheck:
  #    test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
  #    interval: 1s
  #    timeout: 5s
  #    retries: 120

  es01:
    # depends_on:
    #     condition: service_healthy
    container_name: es01
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - es-data:/usr/share/elasticsearch/data
      - certs:/usr/share/elasticsearch/config/certs
    environment:
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms4g -Xmx4g"
      - "network.host:0.0.0.0"
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certs/es01/es01.key #Absolute path
      - xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certs/es01/es01.crt #Absolute path
      - xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt #Absolute path
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/certs/es01/es01.key #Absolute path
      - xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/certs/es01/es01.crt #Absolute path
      - xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt #Absolute path
      - xpack.security.transport.ssl.verification_mode=certificate

    ports:
      - 9200:9200
    networks:
      - elastic

    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt https://127.0.0.1:9200 | grep -q 'missing authentication credentials'", # Use 127.0.0.1 or your host's IP, Full path to CA cert
        ]
      interval: 10s
      timeout: 10s
      retries: 120
  
networks:
  elastic:
    external: true
volumes:
  es-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/sda/es-data
  certs:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/sda/certs
  